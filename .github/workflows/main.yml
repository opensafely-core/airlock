---
name: CI

env:
  IMAGE_NAME: airlock
  PUBLIC_IMAGE_NAME: ghcr.io/opensafely-core/airlock
  REGISTRY: ghcr.io

on:
  push:

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: "opensafely-core/setup-action@v1"
        with:
          python-version: "3.11"
          install-just: true
      - name: Set up development environment
        run: just devenv
      - name: Check formatting and linting rules
        run: just check

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: "opensafely-core/setup-action@v1"
        with:
          python-version: "3.11"
          install-just: true
      - name: Set up development environment
        run: just devenv
      - name: Run tests
        run: |
          just test-all

  docker-build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: "opensafely-core/setup-action@v1"
        with:
          install-just: true

      - name: Build docker image for both prod and dev
        run: |
            just docker/build prod
            just docker/build dev

      - name: Save docker prod image
        run: |
          docker save airlock | gzip > /tmp/airlock.tar.gz

      - name: Upload docker prod image
        uses: actions/upload-artifact@v4
        with:
            name: airlock-image
            path: /tmp/airlock.tar.gz

      - name: Save docker dev image
        run: |
          docker save airlock-dev | gzip > /tmp/airlock-dev.tar.gz

      - name: Upload docker dev image
        uses: actions/upload-artifact@v4
        with:
            name: airlock-dev-image
            path: /tmp/airlock-dev.tar.gz



  docker-dev-test-all:
    needs: [docker-build]

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: "opensafely-core/setup-action@v1"
        with:
          install-just: true

      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
            name: airlock-dev-image
            path: /tmp/image

      - name: Import docker image
        run: gunzip -c /tmp/image/airlock-dev.tar.gz | docker load

      - name: Run unit tests on docker dev image
        run: |
          # build docker and run test
          just docker/test


  docker-prod-smoke-test:
    needs: [docker-build]

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: "opensafely-core/setup-action@v1"
        with:
          install-just: true
 
      - name: Download docker image
        uses: actions/download-artifact@v4
        with:
            name: airlock-image
            path: /tmp/image

      - name: Import docker image
        run: gunzip -c /tmp/image/airlock.tar.gz | docker load

      - name: create workdir
        run: |
            # the prod container is forcibly running as user 10000
            # so make this world-readable for now so we can unblock next steps
            sudo touch workdir/db.sqlite3
            sudo chmod -R ugo+rw workdir/

      - name: Run smoke test on prod
        run: |
          SKIP_BUILD=1 just docker/serve prod -d
          sleep 5
          just docker/smoke-test || { docker logs airlock-prod-1; exit 1; }


  docker-publish:
    needs: [docker-dev-test-all, docker-prod-smoke-test]

    runs-on: ubuntu-22.04

    permissions:
      contents: read
      packages: write

    if: github.ref == 'refs/heads/main'

    concurrency: deploy-production

    steps:
     - uses: actions/checkout@v4
     - uses: "opensafely-core/setup-action@v1"
       with:
         install-just: true

     - name: Download docker image
       uses: actions/download-artifact@v4
       with:
           name: airlock-image
           path: /tmp/image

     - name: Import docker image
       run: gunzip -c /tmp/image/airlock.tar.gz | docker load

     - name: Publish image
       run: |
           echo ${{ secrets.GITHUB_TOKEN }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
           docker tag $IMAGE_NAME $PUBLIC_IMAGE_NAME:latest
           docker push $PUBLIC_IMAGE_NAME:latest
