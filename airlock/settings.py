"""
Django settings for airlock project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

import django.dispatch
from django.db.backends.signals import connection_created


_missing_env_var_hint = """\
If you are running commands locally outside of `just` then you should
make sure that your `.env` file is being loaded into the environment,
which you can do in Bash using:

    set -a; source .env; set +a

If you are seeing this error when running via `just` (which should
automatically load variables from `.env`) then you should check that
`.env` contains all the variables listed in `dotenv-sample` (which may
have been updated since `.env` was first created).

If you are seeing this error in production then you haven't configured
things properly.
"""


def get_env_var(name):
    try:
        return os.environ[name]
    except KeyError:
        raise RuntimeError(
            f"Missing environment variable: {name}\n\n{_missing_env_var_hint}"
        )


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Working directory for application state. Note that this is not necessarily relative to
# BASE_DIR: if AIRLOCK_WORK_DIR is an absolute path it can point anywhere.
WORK_DIR = BASE_DIR / get_env_var("AIRLOCK_WORK_DIR")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var("DJANGO_DEBUG") == "True"

ALLOWED_HOSTS = get_env_var("DJANGO_ALLOWED_HOSTS").split(",")


# Application definition

INSTALLED_APPS = [
    # ensure whitenoise serves files when using runserver
    # https://whitenoise.readthedocs.io/en/latest/django.html#using-whitenoise-in-development
    "whitenoise.runserver_nostatic",
    "airlock",
    # "django.contrib.auth",
    # "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    # requirements for assets library
    "django.contrib.humanize",
    "django_vite",
    "slippers",
    "assets",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "airlock.middleware.UserMiddleware",
]

ROOT_URLCONF = "airlock.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                # "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "airlock.nav.menu",
            ],
            "builtins": [
                "slippers.templatetags.slippers",  # required for assets library
            ],
        },
    },
]

WSGI_APPLICATION = "airlock.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": WORK_DIR / "db.sqlite3",
        "CONNECTION_INIT_QUERIES": [
            "PRAGMA journal_mode=wal",
        ],
    }
}


@django.dispatch.receiver(connection_created)
def run_connection_init_queries(*, connection, **kwargs):
    queries = connection.settings_dict.get("CONNECTION_INIT_QUERIES", ())
    with connection.cursor() as cursor:
        for query in queries:
            cursor.execute(query)


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

ASSETS_DIST = BASE_DIR / "assets/dist"
STATICFILES_DIRS = [
    ASSETS_DIST,
]

# Serve files from static dirs directly. This removes the need to run collectstatic
# https://whitenoise.readthedocs.io/en/latest/django.html#WHITENOISE_USE_FINDERS
WHITENOISE_USE_FINDERS = True

DJANGO_VITE = {
    "default": {
        # vite assumes collectstatic, so tell it where the manifest is directly
        "manifest_path": ASSETS_DIST / ".vite/manifest.json",
    },
}

#
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# In production we'd expect AIRLOCK_WORKSPACE_DIR to be an absolute path pointing
# somewhere outside of WORK_DIR
WORKSPACE_DIR = WORK_DIR / get_env_var("AIRLOCK_WORKSPACE_DIR")

REQUEST_DIR = WORK_DIR / get_env_var("AIRLOCK_REQUEST_DIR")

AIRLOCK_API_ENDPOINT = "https://jobs.opensafely.org/api/v2"
assert not AIRLOCK_API_ENDPOINT.endswith("/")

AIRLOCK_API_TOKEN = os.environ.get("AIRLOCK_API_TOKEN")

if AIRLOCK_API_TOKEN:  # pragma: no cover
    AIRLOCK_DEV_USERS_FILE = None
elif dev_user_file := os.environ.get("AIRLOCK_DEV_USERS_FILE"):
    AIRLOCK_DEV_USERS_FILE = WORK_DIR / dev_user_file
else:  # pragma: no cover
    raise RuntimeError(
        f"One of AIRLOCK_API_TOKEN or AIRLOCK_DEV_USERS_FILE environment "
        f"variables must be set.\n\n{_missing_env_var_hint}"
    )

# BACKEND is global env var on backends
BACKEND = os.environ.get("BACKEND", "test")
