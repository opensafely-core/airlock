[project]
  name = "airlock"
  version = "0.1.0"
  description = "Airlock"
  readme = "README.md"
  requires-python = ">=3.11"
  
  dependencies = [
    "ansi2html",
    "Django",
    "django-vite",
    "slippers",
    "django-htmx",
    "django-markdownify",
    "whitenoise",
    "gunicorn",
    "opensafely-pipeline@https://github.com/opensafely-core/pipeline/archive/refs/tags/v2025.03.06.161237.zip",
    "requests",
    "pydantic<2",
    "ulid",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-instrumentation-django",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-sdk",
    # docs
    "mkdocs",
    "mkdocs-material",
    "django-extensions>=4.1",
]

[tool.ruff]
# Exclude upstream assets files from jobserver
exclude = [
  "assets/templates/*",
  "assets/base_views.py"
]

[tool.ruff.lint]
# See: https://docs.astral.sh/ruff/rules/
extend-select = [
  "A", # prevent shadowing builtins
  "COM818", # no trailing commas on bare tuples
  "I",  # isort
  "INP",  # no implicit namespace packages
  "UP",  # pyupgrade
  "W",  # pycodestyle warning
]
extend-ignore = [
  "A005", # ignore stdlib-module-shadowing 
  "E501", # ignore line length
]
isort.lines-after-imports = 2

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "airlock.settings"
testpaths = [
   "tests"
]
filterwarnings = [
    "ignore::DeprecationWarning:opentelemetry.*:",
    "ignore::DeprecationWarning:pytest_freezegun.*:",
]

[tool.coverage.run]
branch = true
patch = ["subprocess"]
# Required to get full coverage when using Playwright
concurrency = ["greenlet", "thread"]
plugins = ["django_coverage_plugin"]
omit = [
  "*/assets/*",
  "airlock/lib/git.py",
  "airlock/management/commands/statemachine.py",
  "tests/functional/test_docs_screenshots.py",
]


[tool.coverage.report]
fail_under = 100
skip_covered = true
exclude_also = [
    # this indicates that the line should never be hit
    "assert False",
    # this condition is only true when a module is run as a script
    'if __name__ == "__main__":',
    # this indicates that a method should be defined in a subclass
    "raise NotImplementedError",
]

[tool.coverage.django_coverage_plugin]
template_extensions = "html"
exclude_blocks = [
    # exclude block lines for end of slippers component (blocks that 
    # start with \ e.g. {% \button %}
    "^\\/\\w+",
]

[tool.ruff.lint.per-file-ignores]
"airlock/views/__init__.py" = ["F401"]

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
disallow_any_generics = true
no_implicit_reexport = true
warn_return_any = true
check_untyped_defs = true
mypy_path = "stubs"
exclude = [
   "airlock/lib/git.py",
]

# Don't follow the import chain into the modules containing code vendored from elsewhere
[[tool.mypy.overrides]]
module = "assets.base_views"
follow_imports = "skip"
[[tool.mypy.overrides]]
module = "services.tracing"
follow_imports = "skip"
[[tool.mypy.overrides]]
module = "airlock.lib.git"
follow_imports = "skip"


[tool.django-stubs]
django_settings_module = "airlock.settings"


# Note: any `exclude-newer-package` timestamps should be removed if > 7 days old
# See https://github.com/opensafely-core/repo-template/blob/main/DEVELOPERS.md for details
[tool.uv]
exclude-newer = "2025-10-24T00:00:00Z"
exclude-newer-package = {}

[dependency-groups]
dev = [
    "django-debug-toolbar",
    "django-debug-toolbar-template-profiler",
    "djhtml",
    "httpx",
    "hypothesis",
    "ruff",
    "playwright",
    "pytest",
    "pytest-cov",
    "pytest-django",
    "pytest-freezer",
    "pytest-playwright",
    "responses",
    # Currently using our fork of django_coverage_plugin, pending
    # upstream PR https://github.com/nedbat/django_coverage_plugin/pull/93
    "django_coverage_plugin@https://github.com/opensafely-core/django_coverage_plugin/archive/153a0ca6c02f7f01831568a546c848c4a3f082cd.zip",
    # Type-checking and type stubs
    "mypy",
    "django-stubs[compatible-mypy]",
    "types-requests",
]
